version: "3.8"

services:
  gateway:
    build: ./Gateway
    container_name: gateway-service
    ports:
      - "8081:8081"
    depends_on:
      - payment
      - order
    networks:
      - app-net

  payment_db:
    image: postgres:15-alpine
    container_name: payment_db
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - payment_db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  payment:
    build: ./Payment
    container_name: payment-service
    ports:
      - "8082:8082"
      - "9094:9094"
    depends_on:
      payment_db:
        condition: service_healthy
    networks:
      - app-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment_db:5432/payment_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

  order_db:
    image: postgres:15-alpine
    container_name: order_db
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - order_db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  order:
    build: ./Order
    container_name: order-service
    ports:
      - "8083:8083"
      - "9091:9091"
    depends_on:
      order_db:
        condition: service_healthy
    networks:
      - app-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order_db:5432/order_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-net

  kafka:
    image: bitnami/kafka:3.3
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - app-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092, localhost:9092, localhost:29092
    depends_on:
      - kafka
    networks:
      - app-net
networks:
  app-net:
    driver: bridge

volumes:
  payment_db:
  order_db:
